package uk.co.lawilliams.finalproject.runcatrun.utils;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Preferences;
import com.badlogic.gdx.math.Vector2;

import uk.co.lawilliams.finalproject.runcatrun.enums.GameState;

/**
 * @author Lauren Williams
 *
 * Singleton class handling the current state the game is in.
 *
 */

public class GameManager implements AndroidInterface{

    private static GameManager thisInstance;
    private GameState gameState;
    private int level;
    private int score;

    private AndroidInterface androidInterface;

    public static GameManager getInstance() {
        if (thisInstance == null) {
            thisInstance = new GameManager();
        }
        return thisInstance;
    }

    private GameManager() {
        gameState = GameState.OVER;
    }

    public GameState getGameState() {
        return gameState;
    }

    public void setGameState(GameState gameState) {
        this.gameState = gameState;
    }

    private Preferences getPreferences() {
        return Gdx.app.getPreferences(Constants.PREFERENCES_NAME);
    }

    public void setAndroidInterface(AndroidInterface androidInterface) {
        this.androidInterface = androidInterface;
    }

    public int loadHigherJump() {
        Preferences pref = getPreferences();
        int higherJumpCount = pref.getInteger(Constants.ITEM_HIGHERJUMP_PREFERENCE, 0);
        pref.flush();
        return higherJumpCount;
    }

    public int loadFreeContinue() {
        Preferences pref = getPreferences();
        int freeContinueCount = pref.getInteger(Constants.ITEM_FREECONTINUE_PREFERENCE, 0);
        pref.flush();
        return freeContinueCount;
    }

    public int loadSlowerDifficulty(){
        Preferences pref = getPreferences();
        int slowDifficultyCount = pref.getInteger(Constants.ITEM_SLOWERDIFFICULTY_PREFERENCE, 0);
        pref.flush();
        return slowDifficultyCount;
    }

    public void saveHigherJump(int highJumpCount) {
        Preferences pref = getPreferences();
        pref.putInteger(Constants.ITEM_HIGHERJUMP_PREFERENCE, highJumpCount);
        pref.flush();
    }

    public void saveFreeContinue(int freeContinueCount) {
        Preferences pref = getPreferences();
        pref.putInteger(Constants.ITEM_FREECONTINUE_PREFERENCE, freeContinueCount);
        pref.flush();
    }

    public void saveSlowerDifficulty(int slowDifficultyCount) {
        Preferences pref = getPreferences();
        pref.putInteger(Constants.ITEM_SLOWERDIFFICULTY_PREFERENCE, slowDifficultyCount);
        pref.flush();
    }


    public boolean useHigherJump() {
        int higherJumpCount = loadHigherJump();

        if (higherJumpCount > 0) {
            higherJumpCount = higherJumpCount - 1;
            saveHigherJump(higherJumpCount);
            return true;
        } else {
            return false;
        }

    }

    public boolean useFreeContinue() {
        int freeContinueCount = loadFreeContinue();

        if (freeContinueCount > 0) {
            freeContinueCount = freeContinueCount - 1;
            saveFreeContinue(freeContinueCount);
            return true;
        } else {
            return false;
        }

    }

    public boolean useSlowDifficulty() {
        int slowDifficultyCount = loadSlowerDifficulty();

        if (slowDifficultyCount > 0) {
            slowDifficultyCount = slowDifficultyCount - 1;
            saveSlowerDifficulty(slowDifficultyCount);
            return true;
        } else {
            return false;
        }

    }


    public void saveScoreAndCoins(int score) {
        Preferences preferences = getPreferences();
        if (score > preferences.getInteger(Constants.SCORE_PREFERENCE, 0)) {
            preferences.putInteger(Constants.SCORE_PREFERENCE, score);
        }
        int coins = preferences.getInteger(Constants.COIN_PREFERENCE, 0) + Math.round(score/10);
        preferences.putInteger(Constants.COIN_PREFERENCE, coins);
        preferences.flush();
    }

    public int loadCoins() {
        Preferences pref = getPreferences();
        int coins = pref.getInteger(Constants.COIN_PREFERENCE, 0);
        pref.flush();
        return coins;

    }

    public void saveCoins(int coins) {
        Preferences pref = getPreferences();
        pref.putInteger(Constants.COIN_PREFERENCE, coins);
        pref.flush();
    }

    public int getScore() {
        return score;
    }

    public void setScore(int score) {
        this.score = score;
    }

    public void setDifficulty(int level) {
        if (level <= 15) {
            this.level = level;
        }
    }

    public void increaseDifficulty() {
        setDifficulty(getDifficulty() + 1);
    }

    public Vector2 getEnemyDifficultySpeed() {
        Vector2 enemyDifficultySpeed;
        int difficulty = getDifficulty();

        switch(difficulty) {
            case 1: enemyDifficultySpeed = Constants.ENEMY_LINEAR_VELOCITY;
                break;
            case 2: enemyDifficultySpeed = new Vector2(-12f, 0f);
                break;
            case 3: enemyDifficultySpeed = new Vector2(-14f, 0f);
                break;
            case 4: enemyDifficultySpeed = new Vector2(-16f, 0f);
                break;
            case 5: enemyDifficultySpeed = new Vector2(-18f, 0f);
                break;
            case 6: enemyDifficultySpeed = new Vector2(-20f, 0f);
                break;
            case 7: enemyDifficultySpeed = new Vector2(-22f, 0f);
                break;
            case 8: enemyDifficultySpeed = new Vector2(-24f, 0f);
                break;
            case 9: enemyDifficultySpeed = new Vector2(-26f, 0f);
                break;
            case 10: enemyDifficultySpeed = new Vector2(-28f, 0f);
                break;
            case 11: enemyDifficultySpeed = new Vector2(-30f, 0f);
                break;
            case 12: enemyDifficultySpeed = new Vector2(-32f, 0f);
                break;
            case 13: enemyDifficultySpeed = new Vector2(-34f, 0f);
                break;
            case 14: enemyDifficultySpeed = new Vector2(-36f, 0f);
                break;
            case 15: enemyDifficultySpeed = new Vector2(-38f, 0f);
                break;
            default: enemyDifficultySpeed = Constants.ENEMY_LINEAR_VELOCITY;
                break;
        }
        return enemyDifficultySpeed;


    }

    public int getDifficulty() {
        return this.level;
    }

    @Override
    public void showTutorial() {
        androidInterface.showTutorial();
    }

    @Override
    public void showLeaderboards() { androidInterface.showLeaderboards(); }

    @Override
    public void showShop() {
        androidInterface.showShop();
    }

}
